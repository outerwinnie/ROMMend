name: Build and Release ROMMend

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        configuration: [Release]
        os: [ubuntu-latest, windows-latest]
        dotnet-version: ['8.0.x']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgl-dev
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore
    
    - name: Publish
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          dotnet publish --configuration ${{ matrix.configuration }} --runtime win-x64 --self-contained true -p:PublishSingleFile=true
        else
          dotnet publish --configuration ${{ matrix.configuration }} --runtime linux-x64 --self-contained true -p:PublishSingleFile=true
        fi
      shell: bash
      
    - name: Create ZIP
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cd bin/${{ matrix.configuration }}/net8.0/win-x64/publish/
          7z a ../../../../../ROMMend-Windows.zip *
        else
          cd bin/${{ matrix.configuration }}/net8.0/linux-x64/publish/
          zip -r ../../../../../ROMMend-Linux.zip *
        fi
      shell: bash
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ROMMend-Windows.zip
          ROMMend-Linux.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }} 
